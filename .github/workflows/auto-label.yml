name: Auto Label PR

on:
  pull_request:
    types: [opened, edited, reopened]

jobs:
  auto-label:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Get PR title
        id: pr_title
        run: echo "title=$(jq -r .pull_request.title \"$GITHUB_EVENT_PATH\")" >> $GITHUB_OUTPUT

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install GitHub CLI
        run: |
          type -p curl >/dev/null || (sudo apt update && sudo apt install curl -y)
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg \
          && sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg \
          && echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null \
          && sudo apt update \
          && sudo apt install gh -y

      - name: Install dependencies
        run: pip install requests scikit-learn numpy konlpy

      - name: Create Python script
        run: |
          cat << 'EOF' > script.py
          import os
          import requests
          import numpy as np
          import subprocess
          import re
          from difflib import SequenceMatcher

          def preprocess_text(text):
              # 대괄호 안의 내용만 추출
              match = re.search(r'\[(.*?)\]', text)
              if match:
                  return match.group(1).strip()
              return text.strip()

          def string_similarity(a, b):
              return SequenceMatcher(None, a, b).ratio()

          def create_comment(message):
              owner, repo = os.getenv('REPO').split('/')
              pr_number = os.getenv('PR_NUMBER')
              headers = {
                  'Authorization': f'Bearer {os.getenv("GH_TOKEN")}',
                  'Accept': 'application/vnd.github+json'
              }
              comment_url = f'https://api.github.com/repos/{owner}/{repo}/issues/{pr_number}/comments'
              data = {'body': message}
              response = requests.post(comment_url, headers=headers, json=data)
              return response.status_code == 201

          owner, repo = os.getenv('REPO').split('/')
          headers = {
              'Authorization': f'Bearer {os.getenv("GH_TOKEN")}',
              'Accept': 'application/vnd.github+json'
          }

          label_api = f'https://api.github.com/repos/{owner}/{repo}/labels'
          labels = []
          page = 1
          while True:
              r = requests.get(f'{label_api}?page={page}', headers=headers)
              data = r.json()
              if not data:
                  break
              labels += [l['name'] for l in data]
              page += 1

          pr_title = os.getenv('PR_TITLE')
          if not labels:
              print('No labels found.')
              create_comment("⚠️ 사용 가능한 라벨이 없어요.")
              exit(0)

          print(f"PR Title: {pr_title}")
          print(f"Available Labels: {labels}")

          # PR 제목 전처리
          processed_title = preprocess_text(pr_title)
          print(f"Processed PR Title: {processed_title}")

          # 각 라벨과의 유사도 계산 (원본 라벨과 처리된 PR 제목 비교)
          similarities = [string_similarity(processed_title, label) for label in labels]

          # 상위 3개 라벨 선택
          top_indices = np.argsort(similarities)[-3:][::-1]
          top_labels = [(labels[i], similarities[i]) for i in top_indices]

          print("\nTop matching labels:")
          for label, score in top_labels:
              print(f"- {label} (score: {score:.3f})")

          # 임계값을 0.1로 낮춤 (한글 매칭의 경우 더 낮은 임계값이 필요할 수 있음)
          if top_labels[0][1] >= 0.1:
              best_label = top_labels[0][0]
              print(f'\nApplying label: {best_label}')
              try:
                  subprocess.run([
                      'gh', 'pr', 'edit', os.getenv('PR_NUMBER'),
                      '--repo', os.getenv('REPO'),
                      '--add-label', best_label
                  ], check=True, capture_output=True, text=True)
                  print("Label applied successfully")
                  create_comment(f"🎉 라벨 '{best_label}'이(가) 자동으로 적용되었어요.")
              except subprocess.CalledProcessError as e:
                  print(f"Error applying label: {e.stderr}")
                  create_comment("😰 라벨 적용 중 오류가 발생했습니다.")
          else:
              print('\nNo sufficiently similar label found. Skipping.')
              comment = "⚠️ 유사한 라벨을 찾을 수 없어요. 다음 중에서 직접 라벨을 선택해주세요:\n\n"
              for label, score in top_labels:
                  comment += f"- {label} (유사도: {score:.3f})\n"
              create_comment(comment)
          EOF

      - name: Run Python script
        env:
          GH_TOKEN: ${{ secrets.ACCESS_TOKEN }}
          PR_TITLE: ${{ steps.pr_title.outputs.title }}
          REPO: ${{ github.repository }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
        run: python script.py
